{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alcipir/Repos/bitcoin-abc/web/cashtab/mobile/components/OnBoarding/OnBoarding.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { WalletContext } from \"../../utils/context\";\nimport { Input, Form, Modal } from 'antd';\nimport { ExclamationCircleOutlined, PlusSquareOutlined, ImportOutlined, LockOutlined } from '@ant-design/icons';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { currency } from \"../Common/Ticker.js\";\nimport { Event } from \"../../utils/GoogleAnalytics\";\nexport var OnBoarding = function OnBoarding(_ref) {\n  var history = _ref.history;\n  var ContextValue = React.useContext(WalletContext);\n  var createWallet = ContextValue.createWallet,\n      validateMnemonic = ContextValue.validateMnemonic;\n\n  var _useState = useState({\n    dirty: true,\n    mnemonic: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      seedInput = _useState4[0],\n      openSeedInput = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isValidMnemonic = _useState6[0],\n      setIsValidMnemonic = _useState6[1];\n\n  var confirm = Modal.confirm;\n\n  function submit() {\n    return _regeneratorRuntime.async(function submit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n              dirty: false\n            }));\n\n            if (formData.mnemonic) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            Event('Onboarding.js', 'Create Wallet', 'Imported');\n            createWallet(formData.mnemonic);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var handleChange = function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name;\n    setIsValidMnemonic(validateMnemonic(value));\n    setFormData(function (p) {\n      return _objectSpread(_objectSpread({}, p), {}, _defineProperty({}, name, value));\n    });\n  };\n\n  function showBackupConfirmModal() {\n    confirm({\n      title: \"Don't forget to back up your wallet\",\n      icon: React.createElement(ExclamationCircleOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }\n      }),\n      content: \"Once your wallet is created you can back it up by writing down your 12-word seed. You can find your seed on the Settings page. If you are browsing in Incognito mode or if you clear your browser history, you will lose any funds that are not backed up!\",\n      okText: 'Okay, make me a wallet!',\n      onOk: function onOk() {\n        Event('Onboarding.js', 'Create Wallet', 'New');\n        createWallet();\n      }\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Welcome to CashTab! CashTab is an open source, non-custodial web wallet for \", currency.name, \".\", React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }), React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), \"Web wallets offer user convenience, but storing large amounts of money on a web wallet is not recommended.\", React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }), React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), \"Create a new wallet below to get started, or import an existing wallet using a seed phrase.\"), React.createElement(FontAwesome.Button, {\n    name: \"plus-square-o\",\n    onPress: function onPress() {\n      return showBackupConfirmModal();\n    },\n    backgroundColor: \"#bb5a00\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 121\n    }\n  }, \"New Wallet\")));\n};","map":{"version":3,"sources":["/Users/alcipir/Repos/bitcoin-abc/web/cashtab/mobile/components/OnBoarding/OnBoarding.js"],"names":["React","useState","WalletContext","Input","Form","Modal","ExclamationCircleOutlined","PlusSquareOutlined","ImportOutlined","LockOutlined","FontAwesome","currency","Event","OnBoarding","history","ContextValue","useContext","createWallet","validateMnemonic","dirty","mnemonic","formData","setFormData","seedInput","openSeedInput","isValidMnemonic","setIsValidMnemonic","confirm","submit","handleChange","e","target","value","name","p","showBackupConfirmModal","title","icon","content","okText","onOk"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,aAAT;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAmC,MAAnC;AACA,SACIC,yBADJ,EAEIC,kBAFJ,EAGIC,cAHJ,EAIIC,YAJJ,QAKO,mBALP;AAWA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,QAAT;AACA,SAASC,KAAT;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACvC,MAAMC,YAAY,GAAGf,KAAK,CAACgB,UAAN,CAAiBd,aAAjB,CAArB;AADuC,MAE/Be,YAF+B,GAEIF,YAFJ,CAE/BE,YAF+B;AAAA,MAEjBC,gBAFiB,GAEIH,YAFJ,CAEjBG,gBAFiB;;AAAA,kBAGPjB,QAAQ,CAAC;AACrCkB,IAAAA,KAAK,EAAE,IAD8B;AAErCC,IAAAA,QAAQ,EAAE;AAF2B,GAAD,CAHD;AAAA;AAAA,MAGhCC,QAHgC;AAAA,MAGtBC,WAHsB;;AAAA,mBAQJrB,QAAQ,CAAC,KAAD,CARJ;AAAA;AAAA,MAQhCsB,SARgC;AAAA,MAQrBC,aARqB;;AAAA,mBASOvB,QAAQ,CAAC,KAAD,CATf;AAAA;AAAA,MAShCwB,eATgC;AAAA,MASfC,kBATe;;AAAA,MAU/BC,OAV+B,GAUnBtB,KAVmB,CAU/BsB,OAV+B;;AAYvC,WAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AACIN,YAAAA,WAAW,iCACJD,QADI;AAEPF,cAAAA,KAAK,EAAE;AAFA,eAAX;;AADJ,gBAMSE,QAAQ,CAACD,QANlB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWIR,YAAAA,KAAK,CAAC,eAAD,EAAkB,eAAlB,EAAmC,UAAnC,CAAL;AACAK,YAAAA,YAAY,CAACI,QAAQ,CAACD,QAAV,CAAZ;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,MAAMS,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AAAA,oBACEA,CAAC,CAACC,MADJ;AAAA,QACdC,KADc,aACdA,KADc;AAAA,QACPC,IADO,aACPA,IADO;AAKtBP,IAAAA,kBAAkB,CAACR,gBAAgB,CAACc,KAAD,CAAjB,CAAlB;AAEAV,IAAAA,WAAW,CAAC,UAAAY,CAAC;AAAA,6CAAUA,CAAV,2BAAcD,IAAd,EAAqBD,KAArB;AAAA,KAAF,CAAX;AACH,GARD;;AAUA,WAASG,sBAAT,GAAkC;AAC9BR,IAAAA,OAAO,CAAC;AACJS,MAAAA,KAAK,EAAE,qCADH;AAEJC,MAAAA,IAAI,EAAE,oBAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF;AAGJC,MAAAA,OAAO,8PAHH;AAIJC,MAAAA,MAAM,EAAE,yBAJJ;AAKJC,MAAAA,IALI,kBAKG;AAGH5B,QAAAA,KAAK,CAAC,eAAD,EAAkB,eAAlB,EAAmC,KAAnC,CAAL;AACAK,QAAAA,YAAY;AACf;AAVG,KAAD,CAAP;AAYH;;AAED,SACI,0CACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAEgBN,QAAQ,CAACsB,IAFzB,OAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,gHAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,gGADJ,EAcI,oBAAC,WAAD,CAAa,MAAb;AAAoB,IAAA,IAAI,EAAC,eAAzB;AAAyC,IAAA,OAAO,EAAE;AAAA,aAAME,sBAAsB,EAA5B;AAAA,KAAlD;AAAkF,IAAA,eAAe,EAAC,SAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4G,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA5G,CAdJ,CADJ;AAsDH,CA1GM","sourcesContent":["import React, { useState } from 'react';\nimport { Text, Button} from 'react-native';\nimport { WalletContext } from '../../utils/context';\nimport { Input, Form, Modal } from 'antd';\nimport {\n    ExclamationCircleOutlined,\n    PlusSquareOutlined,\n    ImportOutlined,\n    LockOutlined,\n} from '@ant-design/icons';\n// import StyledOnboarding from '..//Common/StyledOnBoarding';\n// import PrimaryButton, {\n//     SecondaryButton,\n//     SmartButton,\n// } from '../Common/PrimaryButton';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { currency } from '../Common/Ticker.js';\nimport { Event } from '../../utils/GoogleAnalytics';\n\nexport const OnBoarding = ({ history }) => {\n    const ContextValue = React.useContext(WalletContext);\n    const { createWallet, validateMnemonic } = ContextValue;\n    const [formData, setFormData] = useState({\n        dirty: true,\n        mnemonic: '',\n    });\n\n    const [seedInput, openSeedInput] = useState(false);\n    const [isValidMnemonic, setIsValidMnemonic] = useState(false);\n    const { confirm } = Modal;\n\n    async function submit() {\n        setFormData({\n            ...formData,\n            dirty: false,\n        });\n\n        if (!formData.mnemonic) {\n            return;\n        }\n        // Event(\"Category\", \"Action\", \"Label\")\n        // Track number of created wallets from onboarding\n        Event('Onboarding.js', 'Create Wallet', 'Imported');\n        createWallet(formData.mnemonic);\n    }\n\n    const handleChange = e => {\n        const { value, name } = e.target;\n\n        // Validate mnemonic on change\n        // Import button should be disabled unless mnemonic is valid\n        setIsValidMnemonic(validateMnemonic(value));\n\n        setFormData(p => ({ ...p, [name]: value }));\n    };\n\n    function showBackupConfirmModal() {\n        confirm({\n            title: \"Don't forget to back up your wallet\",\n            icon: <ExclamationCircleOutlined />,\n            content: `Once your wallet is created you can back it up by writing down your 12-word seed. You can find your seed on the Settings page. If you are browsing in Incognito mode or if you clear your browser history, you will lose any funds that are not backed up!`,\n            okText: 'Okay, make me a wallet!',\n            onOk() {\n                // Event(\"Category\", \"Action\", \"Label\")\n                // Track number of created wallets from onboarding\n                Event('Onboarding.js', 'Create Wallet', 'New');\n                createWallet();\n            },\n        });\n    }\n\n    return (\n        <>\n            <Text>\n                Welcome to CashTab! CashTab is an open source, non-custodial web\n                wallet for {currency.name}.\n                <br />\n                <br />\n                Web wallets offer user convenience, but storing large amounts of\n                money on a web wallet is not recommended.\n                <br />\n                <br />\n                Create a new wallet below to get started, or import an existing\n                wallet using a seed phrase.\n            </Text>\n\n            <FontAwesome.Button name=\"plus-square-o\" onPress={() => showBackupConfirmModal()} backgroundColor='#bb5a00'><Text>New Wallet</Text></FontAwesome.Button>\n\n            {/* <StyledButton type=\"secondary\" onPress={() => openSeedInput(!seedInput)}><Text>Import Wallet</Text></StyledButton> */}\n\n            {/* {seedInput && (\n                <StyledOnboarding>\n                    <Form style={{ width: 'auto' }}>\n                        <Form.Item\n                            validateStatus={\n                                !formData.dirty && !formData.mnemonic\n                                    ? 'error'\n                                    : ''\n                            }\n                            help={\n                                !formData.mnemonic || !isValidMnemonic\n                                    ? 'Valid mnemonic seed phrase required'\n                                    : ''\n                            }\n                        >\n                            <Input\n                                prefix={<LockOutlined />}\n                                placeholder=\"mnemonic (seed phrase)\"\n                                name=\"mnemonic\"\n                                onChange={e => handleChange(e)}\n                                required\n                            />\n                        </Form.Item>\n\n                        <SmartButton\n                            disabled={!isValidMnemonic}\n                            onClick={() => submit()}\n                        >\n                            Import\n                        </SmartButton>\n                    </Form>\n                </StyledOnboarding>\n            )} */}\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}