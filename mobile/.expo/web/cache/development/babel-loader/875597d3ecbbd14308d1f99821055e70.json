{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alcipir/Repos/bitcoin-abc/web/cashtab/mobile/components/Common/QRCode.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    font-size: 15px;\\n    color: #8e8e8e;\\n    text-align: center;\\n    cursor: pointer;\\n    margin-bottom: 15px;\\n    padding: 10px 0;\\n    font-family: 'Roboto Mono', monospace;\\n    border-radius: 5px;\\n\\n    span {\\n        font-weight: bold;\\n        color: #444;\\n        font-size: 16px;\\n    }\\n    input {\\n        border: none;\\n        width: 100%;\\n        text-align: center;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        -ms-user-select: none;\\n        user-select: none;\\n        cursor: pointer;\\n        color: #444;\\n        padding: 10px 0;\\n        background: transparent;\\n        margin-bottom: 15px;\\n        display: none;\\n    }\\n    input:focus {\\n        outline: none;\\n    }\\n    input::selection {\\n        background: transparent;\\n        color: #444;\\n    }\\n    @media (max-width: 768px) {\\n        font-size: 11px;\\n        span {\\n            font-size: 12px;\\n        }\\n        input {\\n            font-size: 11px;\\n            margin-bottom: 10px;\\n        }\\n    }\\n    @media (max-width: 340px) {\\n        font-size: 10px;\\n        span {\\n            font-size: 11px;\\n        }\\n        input {\\n            font-size: 11px;\\n            margin-bottom: 10px;\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    font-size: 18px;\\n    font-weight: bold;\\n    width: 100%;\\n    text-align: center;\\n\\n    background-color: \", \";\\n    color: #fff;\\n    position: absolute;\\n    top: 65px;\\n    padding: 30px 0;\\n    @media (max-width: 768px) {\\n        top: 52px;\\n        padding: 20px 0;\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    cursor: pointer;\\n    border-radius: 23px;\\n    background: #ffffff;\\n    box-shadow: rgba(0, 0, 0, 0.01) 0px 0px 1px, rgba(0, 0, 0, 0.04) 0px 4px 8px,\\n        rgba(0, 0, 0, 0.04) 0px 16px 24px, rgba(0, 0, 0, 0.01) 0px 24px 32px;\\n    margin-bottom: 10px;\\n    border: 1px solid #e9eaed;\\n    path:first-child {\\n        fill: #fff;\\n    }\\n    :hover {\\n        border-color: \", \";\\n    }\\n    @media (max-width: 768px) {\\n        border-radius: 18px;\\n        width: 170px;\\n        height: 170px;\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport RawQRCode from 'qrcode.react';\nimport { currency } from '@components/Common/Ticker.js';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Event } from '@utils/GoogleAnalytics';\nexport var StyledRawQRCode = styled(RawQRCode)(_templateObject(), function (_ref) {\n  var _ref$bch = _ref.bch,\n      bch = _ref$bch === void 0 ? 0 : _ref$bch;\n  return bch === 1 ? '#ff8d00;' : '#5ebd6d';\n});\nvar Copied = styled.div(_templateObject2(), function (_ref2) {\n  var _ref2$bch = _ref2.bch,\n      bch = _ref2$bch === void 0 ? 0 : _ref2$bch;\n  return bch === 1 ? '#f59332;' : '#5ebd6d';\n});\nvar CustomInput = styled.div(_templateObject3());\nexport var QRCode = function QRCode(_ref3) {\n  var address = _ref3.address,\n      _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? 210 : _ref3$size,\n      _ref3$onClick = _ref3.onClick,\n      onClick = _ref3$onClick === void 0 ? function () {\n    return null;\n  } : _ref3$onClick,\n      otherProps = _objectWithoutProperties(_ref3, [\"address\", \"size\", \"onClick\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var trimAmount = 6;\n  var address_trim = address ? address.length - trimAmount : '';\n  var txtRef = React.useRef(null);\n\n  var handleOnClick = function handleOnClick(evt) {\n    setVisible(true);\n    setTimeout(function () {\n      setVisible(false);\n    }, 1500);\n    onClick(evt);\n  };\n\n  var handleOnCopy = function handleOnCopy() {\n    var eventLabel = currency.ticker;\n\n    if (address) {\n      var isToken = address.includes(currency.tokenPrefix);\n\n      if (isToken) {\n        eventLabel = currency.tokenTicker;\n      }\n\n      Event('Wallet', 'Copy Address', eventLabel);\n    }\n\n    setVisible(true);\n    setTimeout(function () {\n      txtRef.current.select();\n    }, 100);\n  };\n\n  return React.createElement(CopyToClipboard, {\n    style: {\n      display: 'inline-block',\n      width: '100%',\n      position: 'relative'\n    },\n    text: address,\n    onCopy: handleOnCopy,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    onClick: handleOnClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, React.createElement(Copied, {\n    bch: address && address.includes('bitcoin') ? 1 : 0,\n    style: {\n      display: visible ? null : 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Copied\"), React.createElement(StyledRawQRCode, {\n    id: \"borderedQRCode\",\n    value: address || '',\n    size: size,\n    bch: address && address.includes('bitcoin') ? 1 : 0,\n    renderAs: 'svg',\n    includeMargin: true,\n    imageSettings: {\n      src: address && address.includes('bitcoin') ? currency.logo : currency.tokenLogo,\n      x: null,\n      y: null,\n      height: 32,\n      width: 32,\n      excavate: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }), address && React.createElement(CustomInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }, React.createElement(\"input\", {\n    ref: txtRef,\n    readOnly: true,\n    value: address,\n    spellCheck: \"false\",\n    type: \"text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }), React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }, address.slice(address.includes('bitcoin') ? 12 : 13, address.includes('bitcoin') ? 12 + trimAmount : 13 + trimAmount)), address.slice(address.includes('bitcoin') ? 12 + trimAmount : 13 + trimAmount, address.includes('bitcoin') ? address_trim : address_trim), React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }, address.slice(-trimAmount)))));\n};","map":{"version":3,"sources":["/Users/alcipir/Repos/bitcoin-abc/web/cashtab/mobile/components/Common/QRCode.js"],"names":["React","useState","styled","RawQRCode","currency","CopyToClipboard","Event","StyledRawQRCode","bch","Copied","div","CustomInput","QRCode","address","size","onClick","otherProps","visible","setVisible","trimAmount","address_trim","length","txtRef","useRef","handleOnClick","evt","setTimeout","handleOnCopy","eventLabel","ticker","isToken","includes","tokenPrefix","tokenTicker","current","select","display","width","position","src","logo","tokenLogo","x","y","height","excavate","slice"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport RawQRCode from 'qrcode.react';\nimport { currency } from '@components/Common/Ticker.js';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Event } from '@utils/GoogleAnalytics';\n\nexport const StyledRawQRCode = styled(RawQRCode)`\n    cursor: pointer;\n    border-radius: 23px;\n    background: #ffffff;\n    box-shadow: rgba(0, 0, 0, 0.01) 0px 0px 1px, rgba(0, 0, 0, 0.04) 0px 4px 8px,\n        rgba(0, 0, 0, 0.04) 0px 16px 24px, rgba(0, 0, 0, 0.01) 0px 24px 32px;\n    margin-bottom: 10px;\n    border: 1px solid #e9eaed;\n    path:first-child {\n        fill: #fff;\n    }\n    :hover {\n        border-color: ${({ bch = 0 }) => (bch === 1 ? '#ff8d00;' : '#5ebd6d')};\n    }\n    @media (max-width: 768px) {\n        border-radius: 18px;\n        width: 170px;\n        height: 170px;\n    }\n`;\n\nconst Copied = styled.div`\n    font-size: 18px;\n    font-weight: bold;\n    width: 100%;\n    text-align: center;\n\n    background-color: ${({ bch = 0 }) => (bch === 1 ? '#f59332;' : '#5ebd6d')};\n    color: #fff;\n    position: absolute;\n    top: 65px;\n    padding: 30px 0;\n    @media (max-width: 768px) {\n        top: 52px;\n        padding: 20px 0;\n    }\n`;\n\nconst CustomInput = styled.div`\n    font-size: 15px;\n    color: #8e8e8e;\n    text-align: center;\n    cursor: pointer;\n    margin-bottom: 15px;\n    padding: 10px 0;\n    font-family: 'Roboto Mono', monospace;\n    border-radius: 5px;\n\n    span {\n        font-weight: bold;\n        color: #444;\n        font-size: 16px;\n    }\n    input {\n        border: none;\n        width: 100%;\n        text-align: center;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        cursor: pointer;\n        color: #444;\n        padding: 10px 0;\n        background: transparent;\n        margin-bottom: 15px;\n        display: none;\n    }\n    input:focus {\n        outline: none;\n    }\n    input::selection {\n        background: transparent;\n        color: #444;\n    }\n    @media (max-width: 768px) {\n        font-size: 11px;\n        span {\n            font-size: 12px;\n        }\n        input {\n            font-size: 11px;\n            margin-bottom: 10px;\n        }\n    }\n    @media (max-width: 340px) {\n        font-size: 10px;\n        span {\n            font-size: 11px;\n        }\n        input {\n            font-size: 11px;\n            margin-bottom: 10px;\n        }\n    }\n`;\n\nexport const QRCode = ({\n    address,\n    size = 210,\n    onClick = () => null,\n    ...otherProps\n}) => {\n    const [visible, setVisible] = useState(false);\n    const trimAmount = 6;\n\n    const address_trim = address ? address.length - trimAmount : '';\n\n    const txtRef = React.useRef(null);\n\n    const handleOnClick = evt => {\n        setVisible(true);\n        setTimeout(() => {\n            setVisible(false);\n        }, 1500);\n        onClick(evt);\n    };\n\n    const handleOnCopy = () => {\n        // Event.(\"Category\", \"Action\", \"Label\")\n        // BCH or slp?\n        let eventLabel = currency.ticker;\n        if (address) {\n            const isToken = address.includes(currency.tokenPrefix);\n            if (isToken) {\n                eventLabel = currency.tokenTicker;\n            }\n            // Event('Category', 'Action', 'Label')\n            Event('Wallet', 'Copy Address', eventLabel);\n        }\n\n        setVisible(true);\n        setTimeout(() => {\n            txtRef.current.select();\n        }, 100);\n    };\n\n    return (\n        <CopyToClipboard\n            style={{\n                display: 'inline-block',\n                width: '100%',\n                position: 'relative',\n            }}\n            text={address}\n            onCopy={handleOnCopy}\n        >\n            <div style={{ position: 'relative' }} onClick={handleOnClick}>\n                <Copied\n                    bch={address && address.includes('bitcoin') ? 1 : 0}\n                    style={{ display: visible ? null : 'none' }}\n                >\n                    Copied\n                </Copied>\n\n                <StyledRawQRCode\n                    id=\"borderedQRCode\"\n                    value={address || ''}\n                    size={size}\n                    bch={address && address.includes('bitcoin') ? 1 : 0}\n                    renderAs={'svg'}\n                    includeMargin\n                    imageSettings={{\n                        src:\n                            address && address.includes('bitcoin')\n                                ? currency.logo\n                                : currency.tokenLogo,\n                        x: null,\n                        y: null,\n                        height: 32,\n                        width: 32,\n                        excavate: true,\n                    }}\n                />\n\n                {address && (\n                    <CustomInput>\n                        <input\n                            ref={txtRef}\n                            readOnly\n                            value={address}\n                            spellCheck=\"false\"\n                            type=\"text\"\n                        />\n                        <span>\n                            {address.slice(\n                                address.includes('bitcoin') ? 12 : 13,\n                                address.includes('bitcoin')\n                                    ? 12 + trimAmount\n                                    : 13 + trimAmount,\n                            )}\n                        </span>\n                        {address.slice(\n                            address.includes('bitcoin')\n                                ? 12 + trimAmount\n                                : 13 + trimAmount,\n                            address.includes('bitcoin')\n                                ? address_trim\n                                : address_trim,\n                        )}\n                        <span>{address.slice(-trimAmount)}</span>\n                    </CustomInput>\n                )}\n            </div>\n        </CopyToClipboard>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}